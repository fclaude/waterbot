# GitLab CI/CD Pipeline for WaterBot
# Runs on every commit to ensure code quality and functionality

# Global settings
image: python:3.11-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTEST_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pytest"
  OPERATION_MODE: "emulation"  # Always run in emulation mode for CI

# Cache configuration for faster builds
cache:
  paths:
    - .cache/pip
    - .cache/pytest
    - .venv/

# Pipeline stages
stages:
  - prepare
  - quality
  - test
  - security

# Before script - run for all jobs unless overridden
before_script:
  - apt-get update -qq && apt-get install -y -qq git make
  - python --version
  - pip install --upgrade pip
  - python -m venv .venv
  - source .venv/bin/activate
  - pip install -r requirements.txt

# Stage 1: Prepare environment and dependencies
prepare:dependencies:
  stage: prepare
  script:
    - make install-dev
    - pip freeze > installed-requirements.txt
  artifacts:
    paths:
      - installed-requirements.txt
    expire_in: 1 hour
  only:
    - main
    - merge_requests
    - develop

# Stage 2: Code quality checks
code:format-check:
  stage: quality
  script:
    - pip install black isort
    - make format-check
  only:
    - main
    - merge_requests
    - develop

code:lint:
  stage: quality
  script:
    - pip install flake8
    - make lint
  only:
    - main
    - merge_requests
    - develop

code:type-check:
  stage: quality
  script:
    - pip install mypy
    - make type-check
  allow_failure: true  # Type checking can be strict
  only:
    - main
    - merge_requests
    - develop

# Stage 3: Testing
test:unit:
  stage: test
  script:
    - make test-cov-fail
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - htmlcov/
    expire_in: 30 days
  only:
    - main
    - merge_requests
    - develop

test:python-versions:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11"]
  image: python:${PYTHON_VERSION}-slim
  script:
    - make test
  only:
    - main
    - merge_requests

# Stage 4: Security scanning
security:bandit:
  stage: security
  script:
    - pip install bandit
    - make security-check
  artifacts:
    when: always
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 30 days
  allow_failure: true
  only:
    - main
    - merge_requests
    - develop

security:dependency-scan:
  stage: security
  script:
    - pip install safety
    - safety check --json --output safety-report.json || true
    - safety check
  artifacts:
    when: always
    paths:
      - safety-report.json
    expire_in: 30 days
  allow_failure: true
  only:
    - main
    - merge_requests
    - develop
