# WaterBot - Modern Python project configuration

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "waterbot"
version = "0.2.0"
description = "A Signal bot to control GPIO pins on Raspberry Pi with scheduling"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "WaterBot Team", email = "waterbot@example.com"}
]
maintainers = [
    {name = "WaterBot Team", email = "waterbot@example.com"}
]
keywords = ["raspberry-pi", "signal", "bot", "gpio", "automation", "scheduling"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: POSIX :: Linux",
    "Topic :: Home Automation",
    "Topic :: Communications :: Chat",
]
requires-python = ">=3.8"
dependencies = [
    "python-dotenv",
    "schedule",
    "requests",
    "SignalCliApi",
    "tzlocal",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
    "pytest-watch",
]
rpi = [
    "RPi.GPIO; platform_machine == 'armv6l' or platform_machine == 'armv7l'",
]
all = ["waterbot[dev,rpi]"]

[project.urls]
Homepage = "https://github.com/yourusername/waterbot"
Documentation = "https://github.com/yourusername/waterbot#readme"
Repository = "https://github.com/yourusername/waterbot"
"Bug Tracker" = "https://github.com/yourusername/waterbot/issues"
Changelog = "https://github.com/yourusername/waterbot/releases"

[project.scripts]
waterbot = "waterbot.bot:main"

# Tool configurations

[tool.setuptools.packages.find]
where = ["."]
include = ["waterbot*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S311",
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--cov=waterbot",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["waterbot"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"